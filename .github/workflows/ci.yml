name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Cache version - increment to bust caches
  CACHE_VERSION: v1

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check (changed files)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compute changed files
        id: changes
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="origin/${{ github.base_ref }}"
          else
            BASE="${{ github.event.before }}"
            if [ -z "$BASE" ] || [ "$BASE" = "0000000000000000000000000000000000000000" ]; then
              BASE="$(git rev-list --max-parents=0 HEAD | tail -n1)"
            fi
          fi

          CHANGED_TS=$(git diff --name-only "$BASE"...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          CHANGED_FORMAT=$(git diff --name-only "$BASE"...HEAD | grep -E '\.(ts|tsx|js|jsx|json|md|yml|yaml|css|scss|html)$' || true)

          echo "ts_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_TS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "fmt_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FORMAT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run ESLint on changed files
        if: steps.changes.outputs.ts_files != ''
        run: |
          echo "Linting changed files:"
          echo "${{ steps.changes.outputs.ts_files }}"
          npx eslint ${{ steps.changes.outputs.ts_files }} --max-warnings 0

      - name: Check Prettier formatting on changed files
        if: steps.changes.outputs.fmt_files != ''
        run: npx prettier -c ${{ steps.changes.outputs.fmt_files }}

      - name: TypeScript type check (full project)
        run: npm run type-check

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Multi-platform Build
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [lint-and-typecheck, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
        exclude:
          # Only test Node 18 on Ubuntu to reduce CI time
          - os: windows-latest
            node-version: '18'
          - os: macos-latest
            node-version: '18'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        run: npm run build:linux

      - name: Package Electron app (Windows)
        if: matrix.os == 'windows-latest' && matrix.node-version == '20'
        run: npm run build:win

      - name: Package Electron app (macOS)
        if: matrix.os == 'macos-latest' && matrix.node-version == '20'
        run: npm run build:mac

      - name: Upload build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist-electron/
          retention-days: 7

      - name: Upload build artifacts (Windows)
        if: matrix.os == 'windows-latest' && matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist-electron/
          retention-days: 7

      - name: Upload build artifacts (macOS)
        if: matrix.os == 'macos-latest' && matrix.node-version == '20'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist-electron/
          retention-days: 7

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Performance and Bundle Analysis
  analyze:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY || echo "No dist directory found" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security, analyze]
    if: always()
    steps:
      - name: Check all jobs status
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "One or more CI jobs failed"
          exit 1

      - name: CI Success
        run: |
          echo "✅ All CI checks passed!"
          echo "📝 Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting and type checking passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Multi-platform builds successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security audit completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bundle analysis completed" >> $GITHUB_STEP_SUMMARY

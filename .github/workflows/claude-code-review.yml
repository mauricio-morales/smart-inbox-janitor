name: Claude Code Review

# This workflow runs Claude Code Review on pull requests
# To skip the review, include "skip review" (case-insensitive) in the latest commit message
# Examples that will skip review:
#   - "fix bug skip review"
#   - "Update README - Skip Review"
#   - "HOTFIX: Skip Review due to emergency"

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  # Check if review should be skipped based on commit messages
  check-skip-review:
    runs-on: ubuntu-latest
    outputs:
      skip-review: ${{ steps.check-commits.outputs.skip-review }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check commit messages for skip review
        id: check-commits
        run: |
          # Get only the latest/current commit message in the PR
          LATEST_COMMIT=$(git log --format=%s -1 ${{ github.event.pull_request.head.sha }})
          
          # Convert to lowercase for case-insensitive comparison
          LATEST_COMMIT_LOWER=$(echo "$LATEST_COMMIT" | tr '[:upper:]' '[:lower:]')
          
          # Check if the latest commit message contains "skip review"
          if echo "$LATEST_COMMIT_LOWER" | grep -q "skip review"; then
            echo "skip-review=true" >> $GITHUB_OUTPUT
            echo "Found 'skip review' in latest commit message - skipping Claude Code Review"
          else
            echo "skip-review=false" >> $GITHUB_OUTPUT
            echo "No 'skip review' found in latest commit message - proceeding with Claude Code Review"
          fi

  claude-review:
    needs: check-skip-review
    if: needs.check-skip-review.outputs.skip-review != 'true'
    
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Be constructive and helpful in your feedback.
            For every bug, issue, recommendation or suggestion, provide an AI prompt in a code block (so its easy to copy/paste, don't follow coding notation like comments or anything like that unless you are generating code samples) that the user can use to implement the fix. And whenever possible, add github comments to the files (in line) in the PR review, and include committable suggestions when the recommendation is simple enough that it can be fixed with a simple committable suggestion. DO NOT give the user instructions on how to fix it, rather, give an AI prompt that the user can copy and paste directly in Claude Code.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"

          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

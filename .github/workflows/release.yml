name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

env:
  # GitHub token for releases
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Build and release for all platforms
  release:
    name: Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --watchAll=false

      - name: Run type check
        run: npm run type-check

      - name: Build application
        run: npm run build

      # Linux Release
      - name: Build & Release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Windows Release  
      - name: Build & Release (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # macOS Release
      - name: Build & Release (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Code signing secrets (when available)
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: dist-electron/
          retention-days: 30

  # Create GitHub Release (runs once)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Commits since $LAST_TAG:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
          else
            echo "### All commits in this release:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "Choose the appropriate download for your platform:" >> release_notes.md
          echo "- **Windows**: Download the `.exe` installer" >> release_notes.md
          echo "- **macOS**: Download the `.dmg` file" >> release_notes.md
          echo "- **Linux**: Download the `.AppImage` file" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          echo "ü§ñ *This release was automatically generated by GitHub Actions*" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}
          files: |
            ./artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on release completion
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Release Success
        if: needs.create-release.result == 'success'
        run: |
          echo "‚úÖ Release completed successfully!"
          echo "üöÄ New release is available at: https://github.com/${{ github.repository }}/releases/latest"
          
      - name: Release Failed
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Please check the workflow logs for more details."
          exit 1
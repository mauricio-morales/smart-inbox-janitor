{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "🔍 Full CI/CD Check",
      "detail": "Run complete local validation matching GitHub Actions CI",
      "type": "shell",
      "command": "dotnet",
      "args": ["build", "--configuration", "Release"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": "$msCompile",
      "dependsOrder": "sequence",
      "dependsOn": ["🧪 Code Quality Check", "🧪 Run Unit Tests"]
    },
    {
      "label": "🧪 Code Quality Check", 
      "detail": "Run formatting validation and code analysis",
      "type": "shell",
      "command": "dotnet",
      "args": ["format", "--verify-no-changes"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🏗️ Build All Targets",
      "detail": "Build for all platforms (Release configuration)",
      "type": "shell", 
      "command": "dotnet",
      "args": ["build", "--configuration", "Release"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🔐 Security Audit",
      "detail": "Run NuGet vulnerability checks",
      "type": "shell",
      "command": "dotnet",
      "args": ["list", "package", "--vulnerable", "--include-transitive"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always", 
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🧽 Clean & Restore",
      "detail": "Clean bin/obj folders and restore NuGet packages",
      "type": "shell",
      "command": "dotnet",
      "args": ["clean"],
      "group": "build", 
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "dependsOrder": "sequence",
      "dependsOn": ["Clean Solution", "Restore Packages"]
    },
    {
      "label": "Clean Solution",
      "detail": "Clean all build artifacts",
      "type": "shell",
      "command": "dotnet", 
      "args": ["clean"],
      "presentation": {
        "echo": false,
        "reveal": "silent"
      },
      "problemMatcher": []
    },
    {
      "label": "Restore Packages",
      "detail": "Restore NuGet packages",
      "type": "shell",
      "command": "dotnet",
      "args": ["restore"],
      "presentation": {
        "echo": false,
        "reveal": "silent"
      },
      "problemMatcher": []
    },
    {
      "label": "⚡ Quick CI Check",
      "detail": "Fast validation - format code, build, and test",
      "type": "shell",
      "command": "dotnet",
      "args": ["test", "--blame-hang", "--blame-hang-timeout", "30s", "--configuration", "Release"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": "$msCompile",
      "dependsOrder": "sequence",
      "dependsOn": ["🎨 Format Code"]
    },
    {
      "label": "⚡ Quick CI Check + Docker",
      "detail": "Fast validation including Docker-based cross-platform tests",
      "type": "shell",
      "command": "echo",
      "args": ["Quick CI Check with Docker platform testing..."],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new",
        "focus": true,
        "clear": true
      },
      "problemMatcher": "$msCompile",
      "dependsOrder": "sequence",
      "dependsOn": ["🎨 Format Code", "🏗️ Build All Targets", "🧪 Run Unit Tests", "🐳 Multi-Platform Docker Tests"]
    },
    {
      "label": "📱 Build macOS App",
      "detail": "Build macOS application bundle",
      "type": "shell",
      "command": "dotnet",
      "args": ["publish", "src/TrashMailPanda/TrashMailPanda/TrashMailPanda.csproj", "-c", "Release", "-r", "osx-x64", "--self-contained"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🚀 Run Application",
      "detail": "Run the TrashMail Panda application",
      "type": "shell",
      "command": "dotnet",
      "args": ["run", "--project", "src/TrashMailPanda/TrashMailPanda/TrashMailPanda.csproj"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "🔥 Dev Mode",
      "detail": "Start development mode",
      "type": "shell", 
      "command": "dotnet",
      "args": ["run", "--project", "src/TrashMailPanda/TrashMailPanda/TrashMailPanda.csproj"],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🧪 Run Unit Tests",
      "detail": "Run xUnit tests with coverage",
      "type": "shell",
      "command": "dotnet",
      "args": ["test", "--blame-hang", "--blame-hang-timeout", "30s", "--collect:\"XPlat Code Coverage\"", "--configuration", "Release"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🔄 Watch Unit Tests",
      "detail": "Run tests in watch mode for active development",
      "type": "shell",
      "command": "dotnet",
      "args": ["watch", "test", "--blame-hang", "--blame-hang-timeout", "30s", "--project", "src/Tests"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "new",
        "focus": true
      },
      "problemMatcher": "$msCompile"
    },
    {
      "label": "🎨 Format Code",
      "detail": "Format code using dotnet format (includes whitespace)",
      "type": "shell",
      "command": "dotnet", 
      "args": ["format"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "dependsOrder": "sequence",
      "dependsOn": ["Format Whitespace", "Format Styles"]
    },
    {
      "label": "Format Whitespace",
      "detail": "Format whitespace using dotnet format whitespace",
      "type": "shell",
      "command": "dotnet",
      "args": ["format", "whitespace"],
      "presentation": {
        "echo": false,
        "reveal": "silent"
      },
      "problemMatcher": []
    },
    {
      "label": "Format Styles", 
      "detail": "Format code styles using dotnet format style",
      "type": "shell",
      "command": "dotnet",
      "args": ["format", "style"],
      "presentation": {
        "echo": false,
        "reveal": "silent"
      },
      "problemMatcher": []
    },
    {
      "label": "📊 Show Solution Info",
      "detail": "Display solution structure and project dependencies",
      "type": "shell",
      "command": "dotnet",
      "args": ["sln", "list"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🐳 Multi-Platform Docker Tests",
      "detail": "Run tests across multiple platforms using Docker containers",
      "type": "shell",
      "command": "./scripts/run-cross-platform-tests.sh",
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "dependsOn": ["🐳 Check Docker Environment"]
    },
    {
      "label": "🐧 Linux Platform Tests",
      "detail": "Run Linux-specific tests with libsecret in Docker container",
      "type": "shell",
      "command": "./scripts/run-linux-tests.sh",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "dependsOn": ["🐳 Check Docker Environment"]
    },
    {
      "label": "🪟 Windows Platform Tests",
      "detail": "Run Windows-specific DPAPI tests in Windows Docker container",
      "type": "shell",
      "command": "powershell",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "./scripts/run-windows-tests.ps1"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "windows": {
        "command": "powershell"
      },
      "linux": {
        "command": "echo",
        "args": ["Windows platform tests can only run on Windows hosts with Docker Desktop"]
      },
      "osx": {
        "command": "echo",
        "args": ["Windows platform tests can only run on Windows hosts with Docker Desktop"]
      }
    },
    {
      "label": "🍎 macOS Platform Tests",
      "detail": "Run macOS-specific Keychain tests (requires macOS host)",
      "type": "shell",
      "command": "./scripts/run-macos-tests.sh",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "osx": {
        "command": "./scripts/run-macos-tests.sh"
      },
      "windows": {
        "command": "echo",
        "args": ["macOS platform tests can only run on macOS hosts. Use GitHub Actions for macOS testing."]
      },
      "linux": {
        "command": "echo",
        "args": ["macOS platform tests can only run on macOS hosts. Use GitHub Actions for macOS testing."]
      }
    },
    {
      "label": "🔄 Full Platform Test Suite",
      "detail": "Run comprehensive tests across all supported platforms",
      "type": "shell",
      "command": "echo",
      "args": ["Running full platform test suite..."],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "dependsOrder": "parallel",
      "dependsOn": [
        "🐳 Multi-Platform Docker Tests",
        "🐧 Linux Platform Tests"
      ]
    },
    {
      "label": "🐳 Check Docker Environment",
      "detail": "Verify Docker is available and ready for container testing",
      "type": "shell",
      "command": "docker",
      "args": ["--version"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "silent",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "🏗️ Build Docker Test Images",
      "detail": "Build all Docker test containers",
      "type": "shell",
      "command": "docker-compose",
      "args": ["-f", "docker-compose.tests.yml", "build", "--parallel"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true
      },
      "problemMatcher": [],
      "dependsOn": ["🐳 Check Docker Environment"]
    },
    {
      "label": "🧹 Clean Docker Test Environment",
      "detail": "Clean up Docker test containers and images",
      "type": "shell",
      "command": "docker-compose",
      "args": ["-f", "docker-compose.tests.yml", "down", "--rmi", "local", "--volumes"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    }
  ]
}
